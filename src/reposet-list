#!/bin/bash
# author: andreasl

script_name="${0##*/}"
IFS= read -r -d '' script_description << HELP_EOF
${script_name}
Lists the repos in the given reposets.
By default, prints the paths to the repos, but can also print the other information stored in the
reposets.

Usage:
  ${script_name} [OPTIONS] [<reposet>...]

Options:
  -a, --all               Print all information about each repo.
                          Imply --branch, --pull and --push.
  -b, --branch            Print local default branch name.
  -n, --no-numbers        Omit the number that preceedes each output line.
  --pull                  Print the remote and remote branch used to pull.
                          Imply --pull-remote and --pull-branch.
  --pull-branch           Print the remote branch name from which to pull.
  --pull-remote           Print the remote name from which to pull.
  --push                  Print the remote and remote branch used to push.
                          Imply --push-remote and --push-branch.
  --push-branch           Print the remote branch name to which to push.
  --push-remote           Print the remote name to which to push.
  -r, --raw               Print the raw repo definition lines.
  -s, --summary           Print the number of found repos at the last line.

Examples:
  ${script_name}                  # list repo paths from the default reposet
  ${script_name} my               # list repo paths from the reposet \"my\"
  ${script_name} -all my work     # list all repo info from the reposets \"my\" and \"work\"
  ${script_name} -a -n -s my      # list all repo info from the reposet \"my\" without line numbers and with a summary line
  ${script_name} -h               # print the usage message
  ${script_name} --help           # print the usage message
HELP_EOF

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=reposet.inc.sh
source "${script_dir}/reposet.inc.sh"

show_numbers=true
while [ $# -gt 0 ]; do
    case "$1" in
    -h|--help)
        printf -- "$script_description"
        exit 0
        ;;
    -a|--all)
        show_local_branch=true
        show_pull_branch=true
        show_pull_remote=true
        show_push_branch=true
        show_push_remote=true
        ;;
    -b|--branch)
        show_local_branch=true
        ;;
    -n|--no-numbers)
        show_numbers=false
        ;;
    --pull)
        show_pull_branch=true
        show_pull_remote=true
        ;;
    --pull-branch)
        show_pull_branch=true
        ;;
    --pull-remote)
        show_pull_remote=true
        ;;
    --push)
        show_push_branch=true
        show_push_remote=true
        ;;
    --push-branch)
        show_push_branch=true
        ;;
    --push-remote)
        show_push_remote=true
        ;;
    -r|--raw)
        show_raw_output=true
        ;;
    -s|--summary)
        print_summary_line=true
        ;;
    *) # reposet name / unknown option
        reposets+=("$1")
        ;;
    esac
    shift
done

load_reposets_or_die "${reposets[@]}"

if [ "$show_raw_output" != true ]; then

    col_len_path=10
    col_len_local_branch=13
    col_len_push_remote=12
    col_len_push_branch=10
    col_len_pull_remote=12
    col_len_pull_branch=19
    for repo in "${_repos[@]}"; do
        set_common_repo_variables "$repo"
        n_current_repo++

        [ ${#repo_path} -gt $col_len_path ] && col_len_path=${#repo_path}
        [ ${#local_branch} -gt $col_len_local_branch ] && col_len_local_branch=${#local_branch}
        [ ${#pull_remote} -gt $col_len_pull_remote ] && col_len_pull_remote=${#pull_remote}
        [ ${#pull_branch} -gt $col_len_pull_branch ] && col_len_pull_branch=${#pull_branch}
        [ ${#push_remote} -gt $col_len_push_remote ] && col_len_push_remote=${#push_remote}
        [ ${#push_branch} -gt $col_len_push_branch ] && col_len_push_branch=${#push_branch}
    done

    [ "$show_numbers" == true ] && printf '%-3s ' 'NR';
    printf "%-${col_len_path}s  " 'REPO_PATH'
    [ "$show_local_branch" == true ] && printf "%-${col_len_local_branch}s  " 'LOCAL_BRANCH'
    [ "$show_pull_remote" == true ] && printf "%-${col_len_pull_remote}s  " 'PULL_REMOTE'
    [ "$show_pull_branch" == true ] && printf "%-${col_len_pull_branch}s  " 'REMOTE_PULL_BRANCH'
    [ "$show_push_remote" == true ] && printf "%-${col_len_push_remote}s  " 'PUSH_REMOTE'
    [ "$show_push_branch" == true ] && printf "%-${col_len_push_branch}s  " 'REMOTE_PUSH_BRANCH'
    printf '\n'
fi

n_current_repo=0
for repo in "${_repos[@]}"; do
    set_common_repo_variables "$repo"
    n_current_repo++

    [ "$show_numbers" == true ] && printf '%-3s ' "${n_current_repo}:";

    if [ "$show_raw_output" == true ]; then
            printf '%s\n' "$repo"
    else
        printf "%-${col_len_path}s  " "$repo_path"
        [ "$show_local_branch" == true ] && printf "%-${col_len_local_branch}s  " "$local_branch"
        [ "$show_pull_remote" == true ] && printf "%-${col_len_pull_remote}s  " "$pull_remote"
        [ "$show_pull_branch" == true ] && printf "%-${col_len_pull_branch}s  " "$pull_branch"
        [ "$show_push_remote" == true ] && printf "%-${col_len_push_remote}s  " "$push_remote"
        [ "$show_push_branch" == true ] && printf "%-${col_len_push_branch}s  " "$push_branch"
        printf '\n'
    fi
done

[ "$print_summary_line" == true ] && printf '%s repositories.\n' "$n_repos";
