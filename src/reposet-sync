#!/bin/bash
#
# Pulls the default remote branches branches
# and immediately after that pushes the local default branches to the default remotes.
#
# author: andreasl

function show_usage {
    script_name="${0##*/}"

    msg="${script_name}\n"
    msg="${msg}Pulls the default remote branches and immediately after that pushes the local"
    msg="${msg} default branches to the default remotes.\n"
    msg="${msg}For each repo in the given reposets, checks out the local default branches, calls"
    msg="${msg} \`git fetch --prune --tags\` and calls \`git pull --rebase\` from the default"
    msg="${msg} remote pull branch onto the local default branch.\n"
    msg="${msg}Then pushes from the local default branches to the default remotes and branches.\n"
    msg="${msg}Aborts and reports as soon as an error occurs.\n"
    msg="${msg}If no errors are catched, runs \`git status --short --untracked-files\` for each"
    msg="${msg} repo afterwards.\n"
    msg="${msg}\n"
    msg="${msg}Usage:\n"
    msg="${msg}  ${script_name} [<reposet>...]\n"
    msg="${msg}\n"
    msg="${msg}Examples:\n"
    msg="${msg}  ${script_name}                  # syncs all repos in the default reposet\n"
    msg="${msg}  ${script_name} my               # syncs all repos in the reposet \"my\"\n"
    msg="${msg}  ${script_name} my work          # syncs all repos in the reposets \"my\" and \"work\"\n"
    msg="${msg}  ${script_name} -h               # prints the usage message\n"
    msg="${msg}  ${script_name} --help           # prints the usage message\n"
    printf "$msg"
}

while [ $# -gt 0 ] ; do
    case "$1" in
    -h|--help)
        show_usage
        exit 0
        ;;
    *) # reposet name / unknown option
        break
        ;;
    esac
    shift # past argument or value
done

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=src/reposet.inc.sh
source "${script_dir}/reposet.inc.sh"
load_reposets_or_die "$@"

for repo in "${_repos[@]}"; do
    set_common_repo_variables "$repo"
    n_current_repo++
    cd_to_repo_or_die 1
    print_current_repo_and_progress
    check_if_local_branch_exists_or_die 2
    checkout_local_branch_or_die 3
    git_fetch_and_pull_or_die
    git_push_or_die
done

print_all_repos_status_or_die 4