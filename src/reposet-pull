#!/bin/bash
# author: andreasl

script_name="${0##*/}"
IFS= read -r -d '' script_description << HELP_EOF
${script_name}
Pulls the remote pull branches onto the local branches.
Checks out the local default branches, calls \`git fetch --prune --tags\` and calls
\`git pull --rebase\` from the default remote pull branch onto the local default branch in each repo
in the given reposets.
Aborts and reports as soon as an error occurs.
If no errors are catched, runs \`git status --short --untracked-files\` for each repo afterwards.

Usage:
  ${script_name} [-f|--force] [<reposet>...]

Options:
  -f, --force:    Remove conflicting files prior to pulling by calling \`git clean -dfx\` and
                  \`git reset --hard HEAD\`.

Examples:
  ${script_name}             # call \`git pull --rebase\` on all repos in the default reposet
  ${script_name} my          # call \`git pull --rebase\` on all repos in the reposet \"my\"
  ${script_name} my work     # call \`git pull --rebase\` on all repos in the reposets \"my\" and \"work\"
  ${script_name} --force my  # call \`git clean -dfx\` and \`git reset --hard HEAD\` prior to a pull
  ${script_name} -h          # print the usage message
  ${script_name} --help      # print the usage message
HELP_EOF

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=reposet.inc.sh
source "${script_dir}/reposet.inc.sh"

while [ $# -gt 0 ]; do
    case "$1" in
    -f|--force)
        use_force=true
        ;;
    -h|--help)
        printf -- "$script_description"
        exit 0
        ;;
    *) # reposet name / unknown option
        break
        ;;
    esac
    shift
done

load_reposets_or_die "$@"

for repo in "${_repos[@]}"; do
    set_common_repo_variables "$repo"
    n_current_repo++
    cd_to_repo_or_die 1
    print_current_repo_and_progress
    check_if_local_branch_exists_or_die 2
    checkout_local_branch_or_die 3
    git_fetch_and_pull_or_die
done

print_all_repos_status_or_die 4
